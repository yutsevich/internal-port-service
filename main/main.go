package main

import (
	"fmt"
	"github.com/gorilla/mux"
	"internal-port-service/config"
	portcontroller "internal-port-service/internal/controllers"
	"internal-port-service/internal/database"
	"log"
	"net/http"
)

func main() {
	// Load Configurations from config.json using Viper
	config.LoadAppConfig()
	// Initialize Database
	database.Connect(config.AppConfig.ConnectionString)
	database.Migrate()

	// Initialize the router
	router := mux.NewRouter().StrictSlash(true)
	// Register Routes
	RegisterProductRoutes(router)
	// Start the server
	log.Println(fmt.Sprintf("Starting Server on port %s", config.AppConfig.Port))
	log.Fatal(http.ListenAndServe(fmt.Sprintf(":%v", config.AppConfig.Port), router))
}

func RegisterProductRoutes(router *mux.Router) {
	router.HandleFunc("/api/ports", portcontroller.GetPorts).Methods("GET")
	router.HandleFunc("/api/ports/{id}", portcontroller.GetPortById).Methods("GET")
	router.HandleFunc("/api/ports", portcontroller.CreatePort).Methods("POST")
	router.HandleFunc("/api/ports/{id}", portcontroller.UpdatePort).Methods("PUT")
	router.HandleFunc("/api/ports/{id}", portcontroller.DeletePort).Methods("DELETE")
}

//func initDB() {
//	db, err := sql.Open("mysql", "root:password@/rootPass")
//	if err != nil {
//		log.Println(err)
//	}
//
//	database = db
//	defer db.Close()
//}
//
//func IndexHandler(w http.ResponseWriter, r *http.Request) {
//	router := gin.Default()
//	//router.GET("/ports", getPorts)
//	//router.GET("/ports/:id", getPortByID)
//	//router.POST("/ports", postPorts)
//
//	router.Run("localhost:8080")
//
//	rows, err := database.Query("select * from portdb.ports")
//	if err != nil {
//		log.Println(err)
//	}
//	defer rows.Close()
//	ports := []Port{}
//
//	for rows.Next() {
//		p := Port{}
//		err := rows.Scan(
//			&p.Name,
//			&p.City,
//			&p.Country,
//			&p.Alias,
//			&p.Regions,
//			&p.Coordinates,
//			&p.Province,
//			&p.Timezone,
//			&p.Code,
//		)
//		if err != nil {
//			fmt.Println(err)
//			continue
//		}
//		ports = append(ports, p)
//	}
//
//	tmpl, _ := template.ParseFiles("templates/index.html")
//	err = tmpl.Execute(w, ports)
//	if err != nil {
//		return
//	}
//}
//
//type handler interface {
//	GetEntity(*http.Request) (interface{}, error)
//}

//func getPorts(c *gin.Context) {
//	c.IndentedJSON(http.StatusOK, ports)
//}
//
//func postPorts(c *gin.Context) {
//	var newPort Port
//
//	if err := c.BindJSON(&newPort); err != nil {
//		return
//	}
//
//	ports = append(ports, newPort)
//	c.IndentedJSON(http.StatusCreated, newPort)
//}
//
//func getPortByID(c *gin.Context) {
//	//id := c.Param("id")
//
//	for _, p := range ports {
//		//if p.ID == id {
//		c.IndentedJSON(http.StatusOK, p)
//		return
//		//}
//	}
//	c.IndentedJSON(http.StatusNotFound, gin.H{"message": "port not found"})
//}

//CREATE TABLE Products (
//id    integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
//model  varchar(30) NOT NULL,
//company varchar(30) NOT NULL,
//price integer NOT NULL
//);
